
D:\python3>python
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "abc"
>>> s.isalpha()
True
>>> s.isdigit()
False
>>> s= "9059057000"
>>> s.isdigit()
True
>>> s.isdigit() and len(s) == 10
True
>>> s= "9059057abc"
>>> s.isdigit() and len(s) == 10
False
>>> l1 = [10,20]
>>> l2 = l1
>>> id(l1)
2348495596360
>>> id(l2)
2348495596360
>>> l2 = l1[::]
>>> id(l2)
2348497024840
>>> l1
[10, 20]
>>> l2
[10, 20]
>>> l2.append(30)
>>> l1
[10, 20]
>>> t1 = (10)
>>> type(t1)
<class 'int'>
>>> t1 =(10,)
>>> type(t1)
<class 'tuple'>
>>> t4 = ((1,2), (10,20))
>>> t4[0]
(1, 2)
>>> t4[0][0]
1
>>> "3.5".partition(".")
('3', '.', '5')
>>> t = "3.5".partition(".")
>>> v1,v2,v3 = t
>>> v1
'3'
>>> v2
'.'
>>> v3
'5'
>>> len(t)
3
>>> for v in t:
...   print(v)
...
3
.
5
>>> t[0] = 4
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> marks = ( [10,20],[30,[40])
  File "<stdin>", line 1
    marks = ( [10,20],[30,[40])
                              ^
SyntaxError: invalid syntax
>>> marks = ( [10,20],[30,40])
>>> marks[0].append(25)
>>> marks[0]
[10, 20, 25]
>>> t
('3', '.', '5')
>>> '3' in t
True
>>> name = "Srikanth"
>>> 'S' in name
True
>>> l =[10] * 5
>>> l
[10, 10, 10, 10, 10]
>>> "*" * 10
'**********'
>>> (10,20) * 4
(10, 20, 10, 20, 10, 20, 10, 20)
>>> min(t)
'.'
>>> ord('.')
46
>>> v1 = t
>>> v1
('3', '.', '5')
>>> v1,v2 = t
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: too many values to unpack (expected 2)
>>> v1,v2,v3 = t
>>> nt = (v1,v3)
>>> nt
('3', '5')
>>> lang ={'c','Python','Java'}
>>> lang
{'c', 'Java', 'Python'}
>>> lang.append('C#')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'set' object has no attribute 'append'
>>> dir(set)
['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__
format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__iand__', '__init__', '__i
nit_subclass__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt_
_', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '
__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__sub
classhook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discar
d', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', '
remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update']
>>> lang.add('C#')
>>> lang
{'c', 'C#', 'Java', 'Python'}
>>> pastlang = {'pascal','cobol'}
>>> lang | pastlang
{'Java', 'pascal', 'cobol', 'Python', 'c', 'C#'}
>>> lang.add('Java')
>>> lang
{'c', 'C#', 'Java', 'Python'}
>>> alllangs = lang | pastlang
>>> alllangs
{'Java', 'pascal', 'cobol', 'Python', 'c', 'C#'}
>>> lang.union(pastlang)
{'Java', 'pascal', 'cobol', 'Python', 'c', 'C#'}
>>> lang
{'c', 'C#', 'Java', 'Python'}
>>>